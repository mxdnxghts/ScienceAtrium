// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScienceAtrium.Infrastructure.Data;

#nullable disable

namespace ScienceAtrium.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231008093544_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScienceAtrium.Domain.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExecutorId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasPrecision(12, 2)
                        .HasColumnType("timestamp(12) with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("CustomerId1");

                    b.HasIndex("ExecutorId")
                        .IsUnique();

                    b.HasIndex("ExecutorId1");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ScienceAtrium.Domain.WorkTemplateAggregate.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.WorkTemplateAggregate.WorkTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("WorkType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("WorkTemplates");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.UserAggregate.CustomerAggregate.Customer", b =>
                {
                    b.HasBaseType("ScienceAtrium.Domain.UserAggregate.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.UserAggregate.Executor.Executor", b =>
                {
                    b.HasBaseType("ScienceAtrium.Domain.UserAggregate.User");

                    b.HasDiscriminator().HasValue("Executor");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("ScienceAtrium.Domain.UserAggregate.CustomerAggregate.Customer", "Customer")
                        .WithOne("CurrentOrder")
                        .HasForeignKey("ScienceAtrium.Domain.OrderAggregate.Order", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ScienceAtrium.Domain.UserAggregate.CustomerAggregate.Customer", null)
                        .WithMany("FormerOrders")
                        .HasForeignKey("CustomerId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ScienceAtrium.Domain.UserAggregate.Executor.Executor", "Executor")
                        .WithOne("CurrentOrder")
                        .HasForeignKey("ScienceAtrium.Domain.OrderAggregate.Order", "ExecutorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ScienceAtrium.Domain.UserAggregate.Executor.Executor", null)
                        .WithMany("DoneOrders")
                        .HasForeignKey("ExecutorId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.WorkTemplateAggregate.WorkTemplate", b =>
                {
                    b.HasOne("ScienceAtrium.Domain.OrderAggregate.Order", null)
                        .WithMany("WorkTemplates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ScienceAtrium.Domain.WorkTemplateAggregate.Subject", "Subject")
                        .WithOne()
                        .HasForeignKey("ScienceAtrium.Domain.WorkTemplateAggregate.WorkTemplate", "SubjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.OrderAggregate.Order", b =>
                {
                    b.Navigation("WorkTemplates");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.UserAggregate.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("CurrentOrder");

                    b.Navigation("FormerOrders");
                });

            modelBuilder.Entity("ScienceAtrium.Domain.UserAggregate.Executor.Executor", b =>
                {
                    b.Navigation("CurrentOrder");

                    b.Navigation("DoneOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
