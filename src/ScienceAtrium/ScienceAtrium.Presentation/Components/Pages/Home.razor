@page "/"
@rendermode InteractiveServer
@inject IMediator Mediator
@inject Serilog.ILogger Logger
@inject NavigationManager NavigationManager
@inject IReader<Customer> CustomerReader
@inject IMapper Mapper

<link rel="stylesheet" href="css/main.css" />

<section id="main" class="main">
	<div class="container">

		<div class="text-main">

			<p class="left">nceAtrium</p>
			<p class="right">Education</p>
			<p></p>

		</div>

		<div class="img-main">

			<img class="keyboard" src="img/keyboard.png" width="600px">
			<img class="mouse" src="img/mouse.png" width="150px" height="130px">

		</div>

		<div class="img-title-page">

			<img class="title-page" src="img/title-page.png" width="500px" height="700px">

		</div>

	</div>
</section>

<section id="work" class="work">

	<h2>Выполняемые работы</h2>

	<div class="fan-title">

		<img class="title-one" src="img/title-page.png" width="350" height="500">
		<img class="title-two" src="img/title-page.png" width="350" height="500">
		<img class="title-three" src="img/title-page.png" width="350" height="500">
		<img class="title-four" src="img/title-page.png" width="350" height="500">
		<img class="title-five" src="img/title-page.png" width="350" height="500">

	</div>

	<div class="blok-work">

		<div class="lab">

			<img src="img/paper.png" width="70" height="70">
			<p style="font-weight: 700;">Лабораторная работа</p>
			<p>Выполнение работы по выбранному предмету</p>
			<p>₽ 2000</p>

		</div>

		<div class="diploma">

			<img src="img/diploma.png" width="70" height="70">
			<p style="font-weight: 700;">Курсовая работа</p>
			<p>Выполнение работы по выбранному предмету</p>
			<p>₽ 20000</p>

		</div>

	</div>

</section>

<section id="stages-of-work" class="stages-of-work">

	<h3>Как проходит работа</h3>

	<div class="blocks-stages">

		<div class="stgblock">
			<img src="img/envelope.png" width="60" height="60">
			<p>Вы оформляете заказ</p>
		</div>

		<div class="stgblock">
			<img src="img/opposite-opinion.png" width="70" height="70">
			<p>Обсуждение деталей</p>
		</div>

		<div class="stgblock">
			<img src="img/keyboard-2.png" width="70" height="70">
			<p>Мы выполняем работу</p>
		</div>

		<div class="stgblock">
			<img src="img/cardboard-box.png" width="70" height="70">
			<p>Сдача работы</p>
		</div>

	</div>

</section>

<section id="catalog" class="catalog">

	<h4>Каталог</h4>

	<div class="sublist">
		
		<label for="list-subjects">Выберите предмет:</label>
		<select id="list-subjects" name="list-subjects" @bind="_workTemplateFilter">
		@foreach(var workTemplate in _workTemplates)
			{
				<option value="@workTemplate.Id">@workTemplate.Title</option>
			}
		</select>

	</div>

	<div class="blocks-catalog">

		@foreach (var workTemplate in _workTemplates)
		{
			<div style="background-color: #91ABA2;" class="ctlblock">
				<img src="img/title-page.png" width="80" height="100">
				<p style="white-space: normal;">@workTemplate.Title</p>
				<p>₽ @workTemplate.Price</p>
				<button @onclick="async () => await AddWorkTemplateAsync(workTemplate)" class="btn-shop">Заказать</button>
			</div>
		}

	</div>

</section>

<section id="guarantees" class="guarantees">

	<h5>Наши гарантии на все работы</h5>

	<div class="block-guarantees">

		<div class="calblock">
			<img src="img/calendar.png" width="90" height="90">
			<p style="font-weight: 700;">Гарантия сроков</p>
			<p>Вы получаете работу точно в срок, иначе мы вернем 1% от его стоимости за каждый день просрочки </p>
		</div>

		<div class="warblock">
			<img src="img/warranty.png" width="90" height="90">
			<p style="font-weight: 700;">Гарантия качества</p>
			<p>Вы получите то что вам нужно при хотя бы малейшем контактировании с нами</p>
		</div>

	</div>

	<div class="fan-file">

		<img class="file-four" src="img/file-4.png" width="350" height="500">
		<img class="file-three" src="img/file-3.png" width="350" height="500">
		<img class="file-two" src="img/file-2.png" width="350" height="500">
		<img class="file-one" src="img/file-1.png" width="350" height="500">

	</div>

</section>

@code {
	private readonly List<WorkTemplate> _workTemplates = [];
	private Customer _currentUser;
	private Order _currentOrder;
	private Guid _subjectFilterId = Guid.Empty;
	private Guid _workTemplateFilter = Guid.Empty;

	protected override async Task OnInitializedAsync()
	{
		var workTemplates = await Mediator.Send(new GetWorkTemplateListQuery());
		_workTemplates.AddRange(workTemplates);
		_currentUser = await Mediator.Send(new GetCustomerByPredicateQuery(x => x.Id != Guid.Empty));
		_currentOrder = await GetOrderAsync(_currentUser.Id);
	}

	private async Task ApplyFilter()
	{
		// TODO: implement filtration of WorkTemplates by chosen _workTemplateFilter (i.e. by Subject)
	}

	private async Task AddWorkTemplateAsync(WorkTemplate workTemplate)
	{
		_currentOrder.AddWorkTemplate(workTemplate);
		await MakeOrderAsync(_currentOrder, _currentUser.Id);
	}

	private async Task<Customer> GetCustomerAsync()
	{
		return await Mediator.Send(new GetCustomerByPredicateQuery(x => x.Id != Guid.Empty));
	}

	private async Task<Order> GetOrderAsync(Guid customerId)
	{
		var order = await Mediator.Send(new GetOrderByCustomerIdWithStatusQuery(customerId, OrderStatus.Delayed));
		if (order.Equals(Order.Default))
			return new Order(Guid.NewGuid()).UpdateCustomer(CustomerReader, _currentUser);
		return order;
	}

	private async Task MakeOrderAsync(Order order, Guid customerId)
	{
		var dbOrder = await Mediator.Send(new GetOrderByCustomerIdWithStatusQuery(customerId, OrderStatus.Delayed));

		// is not exists
		if (dbOrder.IsEmpty())
		{
			await Mediator.Send(new CreateOrderCommand(order));
			return;
		}

		await Mediator.Send(new UpdateOrderCommand(order));
	}
}