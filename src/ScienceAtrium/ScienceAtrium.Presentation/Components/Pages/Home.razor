@page "/home"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authentication.Google
@using Microsoft.AspNetCore.Authorization
@using ScienceAtrium.Presentation.Components.Account

@inject IMediator Mediator
@inject Serilog.ILogger Logger
@inject IdentityRedirectManager NavigationManager
@inject IReader<Customer> CustomerReader
@inject IMapper Mapper
@inject IHttpClientFactory HttpClientFactory
@inject IDataProtectionProvider DataProtectionProvider

<link rel="stylesheet" href="css/main.css" />

<section id="main" class="main">
	<div class="container">

		<div class="text-main">

			<p class="left">nceAtrium</p>
			<p class="right">Education</p>
			<p></p>

		</div>

		<div class="img-main">

			<img class="keyboard" src="img/keyboard.png" width="600px">
			<img class="mouse" src="img/mouse.png" width="150px" height="130px">

		</div>

		<div class="img-title-page">

			<img class="title-page" src="img/title-page.png" width="500px" height="700px">

		</div>

	</div>
</section>

<section id="work" class="work">

	<h2>Выполняемые работы</h2>

	<div class="fan-title">

		<img class="title-one" src="img/title-page.png" width="350" height="500">
		<img class="title-two" src="img/title-page.png" width="350" height="500">
		<img class="title-three" src="img/title-page.png" width="350" height="500">
		<img class="title-four" src="img/title-page.png" width="350" height="500">
		<img class="title-five" src="img/title-page.png" width="350" height="500">

	</div>

	<div class="blok-work">

		<div class="lab">

			<img src="img/paper.png" width="70" height="70">
			<p style="font-weight: 700;">Лабораторная работа</p>
			<p>Выполнение работы по выбранному предмету</p>
			<p>₽ 2000</p>

		</div>

		<div class="diploma">

			<img src="img/diploma.png" width="70" height="70">
			<p style="font-weight: 700;">Курсовая работа</p>
			<p>Выполнение работы по выбранному предмету</p>
			<p>₽ 20000</p>

		</div>

	</div>

</section>

<section id="stages-of-work" class="stages-of-work">

	<h3>Как проходит работа</h3>

	<div class="blocks-stages">

		<div class="stgblock">
			<img src="img/envelope.png" width="60" height="60">
			<p>Вы оформляете заказ</p>
		</div>

		<div class="stgblock">
			<img src="img/opposite-opinion.png" width="70" height="70">
			<p>Обсуждение деталей</p>
		</div>

		<div class="stgblock">
			<img src="img/keyboard-2.png" width="70" height="70">
			<p>Мы выполняем работу</p>
		</div>

		<div class="stgblock">
			<img src="img/cardboard-box.png" width="70" height="70">
			<p>Сдача работы</p>
		</div>

	</div>

</section>

<section id="catalog" class="catalog">

	<h4>Каталог</h4>

	<div class="sublist">
		
		<label for="list-subjects">Выберите предмет:</label>
		<InputSelect @bind-Value="_workTemplateFilter" @bind-Value:after="ApplyFilter">
			<option value="00000000-0000-0000-0000-000000000000">Все</option>
			@foreach (var workTemplate in _filteredWorkTemplates)
			{
				<option value="@workTemplate.Id">@workTemplate.Title</option>
			}
		</InputSelect>
	</div>

	<div class="blocks-catalog">

		@foreach (var workTemplate in _workTemplates)
		{
			<div style="background-color: #91ABA2;" class="ctlblock">
				<img src="img/title-page.png" width="80" height="100">
				<p style="white-space: normal;">@workTemplate.Title</p>
				<p>₽ @workTemplate.Price</p>
				@if(IsUserAuthenticated == true.ToString())
				{
					@if (_currentOrder is not null && !_currentOrder.IsEmpty())
					{
						if (!_currentOrder.WorkTemplates.Any(x => x.Id == workTemplate.Id))
						{
							<button @onclick="async () => await AddWorkTemplateAsync(workTemplate)" class="btn-shop">Заказать</button>
						}
						else
						{
							<button @onclick="async () => await RemoveWorkTemplateAsync(workTemplate)" class="btn-shop">Убрать</button>
						}
					}
					else
					{
						<button @onclick="async () => await AddWorkTemplateAsync(workTemplate)" class="btn-shop">Заказать</button>
					}
				}
			</div>
		}

	</div>

</section>

<section id="guarantees" class="guarantees">

	<h5>Наши гарантии на все работы</h5>

	<div class="block-guarantees">

		<div class="calblock">
			<img src="img/calendar.png" width="90" height="90">
			<p style="font-weight: 700;">Гарантия сроков</p>
			<p>Вы получаете работу точно в срок, иначе мы вернем 1% от его стоимости за каждый день просрочки </p>
		</div>

		<div class="warblock">
			<img src="img/warranty.png" width="90" height="90">
			<p style="font-weight: 700;">Гарантия качества</p>
			<p>Вы получите то что вам нужно при хотя бы малейшем контактировании с нами</p>
		</div>

	</div>

	<div class="fan-file">

		<img class="file-four" src="img/file-4.png" width="350" height="500">
		<img class="file-three" src="img/file-3.png" width="350" height="500">
		<img class="file-two" src="img/file-2.png" width="350" height="500">
		<img class="file-one" src="img/file-1.png" width="350" height="500">

	</div>

</section>

@code {
	private List<WorkTemplate> _workTemplates = [];
	private List<WorkTemplate> _filteredWorkTemplates = [];
	private Customer _currentUser;
	private Order _currentOrder;
	private Guid _workTemplateFilter = Guid.Empty;

	[SupplyParameterFromQuery(Name = "user_id")]
	public string ProtectedUserId { get; set; }

	[SupplyParameterFromQuery(Name = "user_email")]
	public string ProtectedUserEmail { get; set; }

    [SupplyParameterFromQuery(Name = "user_authenticated")]
    public string IsUserAuthenticated { get; set; }

	public Guid CustomerId { get; set; }


	protected override async Task OnInitializedAsync()
	{
		var workTemplates = _filteredWorkTemplates = await Mediator.Send(new GetWorkTemplateListQuery());
		_workTemplates.AddRange(workTemplates);
		_currentUser = await UserHelper.GetUser(Mediator, ProtectedUserId, ProtectedUserEmail);
		CustomerId = _currentUser.Id;
		base.StateHasChanged();
		if (_currentUser.IsEmpty())
			return;

		_currentOrder = await GetOrderAsync(_currentUser.Id);
		base.StateHasChanged();
	}

	private async Task ApplyFilter()
	{
		// TODO: implement filtration of WorkTemplates by chosen _workTemplateFilter (i.e. by Subject)
		if (_workTemplateFilter == Guid.Empty)
		{
			_workTemplates = await Mediator.Send(new GetWorkTemplateListQuery());
			return;
		}
		_workTemplates = _filteredWorkTemplates.Where(x => x.Id == _workTemplateFilter).ToList();
	}

	private async Task AddWorkTemplateAsync(WorkTemplate workTemplate)
	{
		_currentOrder.AddWorkTemplate(workTemplate);
		await UpdateOrderAsync(_currentOrder, _currentUser.Id);
	}
	
	private async Task RemoveWorkTemplateAsync(WorkTemplate workTemplate)
	{
		_currentOrder.RemoveWorkTemplate(x => x.Id == workTemplate.Id);
		await Mediator.Send(new UpdateOrderCommand(_currentOrder));
	}

	private async Task SignInRedirectAsync()
	{
		var httpClient = HttpClientFactory.CreateClient("AccountLoginClient");
		var requestUri = "/PerformExternalLoginFromQuery?ReturnUrl=&Action=LoginCallback&Provider=Google";
		var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
		var response = await httpClient.SendAsync(httpRequestMessage);
		if (!response.IsSuccessStatusCode)
		{
			Logger.Error("Request to \"{0}\" returned {1}", requestUri, response.StatusCode);
			return;
		}

	}

	private async Task<Customer> GetCustomerAsync()
	{
		return await Mediator.Send(
			new GetCustomerQuery(
				new EntityFindOptions<Customer>(CustomerId)));
	}

	private async Task<Order> GetOrderAsync(Guid customerId)
	{
		var order = await Mediator.Send(
			new GetOrderQuery(
				new EntityFindOptions<Order>(predicate: x => x.CustomerId == _currentUser.Id
										&& x.Status == OrderStatus.Delayed)));
		if (order.Equals(Order.Default))
			return new Order(Guid.NewGuid()).UpdateCustomer(CustomerReader, _currentUser);
		return order;
	}

	private async Task UpdateOrderAsync(Order order, Guid customerId)
	{
		var dbOrder = await Mediator.Send(
			new GetOrderQuery(
				new EntityFindOptions<Order>(predicate: x => x.CustomerId == _currentUser.Id
										&& x.Status == OrderStatus.Delayed)));

		if (dbOrder.IsEmpty())
		{
			await Mediator.Send(new CreateOrderCommand(order));
			return;
		}

		await Mediator.Send(new UpdateOrderCommand(order));
	}
}