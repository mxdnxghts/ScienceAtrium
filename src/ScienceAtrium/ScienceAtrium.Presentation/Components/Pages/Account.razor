@page "/account"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization

@inject IMediator Mediator
@inject IDataProtectionProvider DataProtectionProvider

@attribute [Authorize(Policy = "google-oauth")]

<link rel="stylesheet" href="css/profile.css" />

<section id="cards" class="cards">

    <container>

        <div class="row">

            <div class="column">

                <div class="rec">

                    <div class="rec-one" style="background-color: #EFC87B;">
                        <img src="img/profile.png" width="80" height="80">
                        <p style="font-weight: 600;">@_user?.Name</p>
                        <div class="add-inf">
                            <p>Электронная почта:<span>@_user?.Email</span></p>
                        </div>

                    </div>

                    <div class="rec-two" style="background-color: #91ABA2;">
                        <img src="img/paper.png" width="80" height="70">
                        <p style="font-weight: 600;">Лист ожидания</p>
                        <div class="add-inf">
                            @if (_deadlineDate != default)
                            {
                                <p>Срок выполнения до:<span>@_deadlineDate.ToShortDateString()</span></p>
                            }
                            else
                            {
                                <p>Срок выполнения до:<span>????</span></p>
                            }
                        </div>

                    </div>

                </div>

            </div>

            <script>
                (function () {
                    'user strit';
                    document.addEventListener('click', EasyTogglerHandler); function EasyTogglerHandler(event) {
                        const EY_BTN = event.target.closest('[data-easy-toggle]');
                        if (EY_BTN) {
                            event.preventDefault();
                            let ey_target = EY_BTN.getAttribute('data-easy-toggle'); let ey_class = EY_BTN.getAttribute('data-easy-class'); 
                                try { 
                                    document.querySelector(ey_target).classList.toggle(ey_class)
                                } 
                                catch (ey_error) {
                                    console.warn('EasyToggler.js: Блок ' + ey_target + ' не существует')
                                }
                        } 
                        else {
                            let ey_rcoe_block_targets = document.querySelectorAll('[data-easy-rcoe]'); Array.from(ey_rcoe_block_targets).forEach.call(ey_rcoe_block_targets,
                                function (ey_rcoe_block_target) {
                                    let ey_rcoe_block = ey_rcoe_block_target.getAttribute('data-easy-toggle'), ey_rcoe_block_class = ey_rcoe_block_target.getAttribute('data-easy-class'); 
                                    if (!event.target.closest(ey_rcoe_block)) {
                                        try {
                                            document.querySelector(ey_rcoe_block).classList.remove(ey_rcoe_block_class)
                                        }
                                        catch (ey_error) {
                                            console.warn('EasyToggler.js : Блок ' + ey_rcoe_block + ' не существует')
                                        }
                                    }
                                })
                        }
                    }
                })()
            </script>

            @foreach (var order in _orders ?? Array.Empty<Order>())
            {
                <div id="modalWin-one" class="modal">
                    <div class="modal-window">
                        <h3>Заказ № @GetOrderNumber(order)</h3>
                        <div class="order-block">
                            @foreach (var workTemplateOrderStatus in _workTemplateOrderStatuses ?? Array.Empty<WorkTemplateOrderStatus>())
                            {
                                <div class="ordblock">
                                    <p class="name-ord">@workTemplateOrderStatus?.WorkTemplate?.Subject?.Name</p>
                                    <p class="st">Статус - <span>@workTemplateOrderStatus?.Status</span></p>
                                    <p>@workTemplateOrderStatus?.WorkTemplate?.Price ₽</p>
                                </div>
                            }

                            <p>Общая стоимость: <span>@order?.TotalCost ₽</span></p>
                            <p>Исполнитель: <span>@order?.Executor?.Name</span></p>
                            <p>Сроки сдачи: <span>@order?.OrderDate.ToShortDateString()</span></p>
                        </div>
                        <button data-easy-toggle="#modalWin-one" data-easy-class="show" data-easy-rcoe class="btn-close">X</button>
                    </div>
                    <div data-easy-toggle="#modalWin-one" data-easy-class="show" data-easy-rcoe class="overlay"></div>
                </div>
            }

            <div class="column col-two" style="background-image: linear-gradient(180deg,hsl(36deg 9% 44%) 1%, hsl(41deg 9% 62%) 62%, hsl(47deg 15% 82%) 100%);">

                <h1>Покупки</h1>

                <div class="catalogblk">
                    @foreach (var order in _orders ?? Array.Empty<Order>())
                    {
                        <div class="blockctlg">
                            <img class="title-page" src="img/title-page.png" width="100" height="130">
                            <p style="white-space: normal;" class="numborder">Заказ № <span>@GetOrderNumber(order)</span></p>
                            <p class="comment">Комментарий: <br><span>5 лаб по порядку</span></p>
                            <p class="st">Статус - <span>@GetTranslatedStatus(order.Status)</span></p>
                            <p>@order.TotalCost ₽</p>
                            <button data-easy-toggle="#modalWin-one" data-easy-class="show" data-easy-rcoe class="but-moredetails">Подробнее</button>
                        </div>
                    }
                        
                </div>

            </div>

        </div>

    </container>

</section>

<script src="scripts/profile-js.js"></script>

@code {
    private User _user;
    private IEnumerable<Order> _orders;
    private IEnumerable<WorkTemplate> _workTemplates;
    private IEnumerable<WorkTemplateOrderStatus> _workTemplateOrderStatuses;
    private DateTime _deadlineDate = default;

    [SupplyParameterFromQuery(Name = "user_id")]
    public string ProtectedUserId { get; set; }

    [SupplyParameterFromQuery(Name = "user_email")]
    public string ProtectedUserEmail { get; set; }

    public Guid CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _user = await UserHelper.GetUser(Mediator, ProtectedUserId, ProtectedUserEmail);
        CustomerId = _user.Id;

        if (_user is null)
        {
            SetDefaults();
            return;
        }

        _orders = _user
                .Orders
                .Where(x => x.Status != OrderStatus.Cancelled
                    && x.Status != OrderStatus.Delayed
                    && x.Status != OrderStatus.Fulfilled)
                .OrderBy(x => x.Status);

        _workTemplates = _orders
            .SelectMany(x => x.WorkTemplates);

        _workTemplateOrderStatuses = GetWorkTemplateOrderStatuses(_orders
            .SelectMany(x => x.WorkTemplatesLink)
            .Where(x => x.Status == OrderWorkTemplateStatus.Paid)
            .Select(x => x.WorkTemplate));

        if (_orders.Count() > 0)
            _deadlineDate = _orders.Select(x => x.OrderDate).Min();
    }

    private void SetDefaults()
    {
        _user = User.Default;
        _orders = Enumerable.Empty<Order>();
        _workTemplates = Enumerable.Empty<WorkTemplate>();
    }

    private IEnumerable<WorkTemplateOrderStatus> GetWorkTemplateOrderStatuses(IEnumerable<WorkTemplate> workTemplates)
    {
        foreach (var workTemplate in workTemplates)
        {
            var currentOrder = _orders
                    .FirstOrDefault(x => x
                        .WorkTemplates
                            .FirstOrDefault(x => x.Id == workTemplate.Id) != null);

            yield return new WorkTemplateOrderStatus()
            {
                WorkTemplate = workTemplate,
                Order = currentOrder,
                Status = currentOrder.Status,
            };
        }
    }

    private string GetTranslatedStatus(OrderStatus orderStatus)
    {
        if (orderStatus == OrderStatus.PaymentWait)
            return "Ожидание оплаты";

        if (orderStatus == OrderStatus.Pending)
            return "В обработке";

        if (orderStatus == OrderStatus.Fulfilled)
            return "Завершен";

        if (orderStatus == OrderStatus.Cancelled)
            return "Отменен";

        if (orderStatus == OrderStatus.Delayed)
            return "Отложен";

        if (orderStatus == OrderStatus.Expired)
            return "Нарушены сроки";

        return "???";
    }

    private string GetOrderNumber(Order order)
    {
        return Math.Abs(order.Id.GetHashCode()).ToString();
    }

    class WorkTemplateOrderStatus
    {
        public WorkTemplate WorkTemplate { get; set; }
        public Order Order { get; set; }
        public OrderStatus Status { get; set; }
    }
}