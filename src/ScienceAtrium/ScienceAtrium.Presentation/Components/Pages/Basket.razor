@page "/basket"
@rendermode InteractiveServer

@using ScienceAtrium.Domain.Exceptions

@inject IMediator Mediator
@inject Serilog.ILogger Logger
@inject NavigationManager NavigationManager
@inject ApplicationTransactionService ApplicationTransactionService
@inject IDataProtectionProvider DataProtectionProvider

<link rel="stylesheet" href="css/basket.css" />

<section id="block" class="block">

    <div class="container">

            <div class="col-one" style="background-image: linear-gradient(180deg,hsl(36deg 9% 44%) 1%, hsl(41deg 9% 62%) 62%, hsl(47deg 15% 82%) 100%);">

                <h1>Корзина</h1>

                <div class="catalog-block">
                    @if (_currentOrder?.WorkTemplates?.Count > 0)
                    {
                        @foreach (var workTemplate in _waitInBasketWorkTemplates)
                        {
                            <div style="background-color: #C9C0B3;" class="ctlgblock">
                                <img src="img/title-page.png" width="100" height="130">
                                <p style="white-space: normal;">@workTemplate.Title</p>
                                <span class="price">@workTemplate.Price</span>
                                <button @onclick="async () => await AddWorkTemplateToListAsync(workTemplate, OrderWorkTemplateStatus.ReadyToPay, EntityState.Modified)" class="btn-shop">Добавить</button>
                            </div>
                        }
                    }

                    else 
                    {
                        <div style="background-color: #C9C0B3;" class="ctlblock">
                            <span class="price">Nothing to show</span>
                        </div>
                    }

                </div>

            </div>

            <div class="col-two" style="background-image: linear-gradient(180deg,hsl(36deg 9% 44%) 1%, hsl(41deg 9% 62%) 62%, hsl(47deg 15% 82%) 100%);">

                <h3>К оформлению</h3>
                @foreach(var workTemplate in _readyToPayWorkTemplates)
                {
                    <span class="name-sub">
                        @workTemplate.Title
                        <button @onclick="async () => await AddWorkTemplateToListAsync(workTemplate, OrderWorkTemplateStatus.WaitInBasket, EntityState.Modified)" class="btn-shop delete-btn">Убрать</button>
                    </span>
                }

                <span class="price">₽ @_totalPriceReadyToPayWorkTemplates</span>
			    <input type="date" id="date" name="date" @bind="_orderDate">
                <button @onclick="PayAsync" class="btn-shop bt-col-two" >Оплатить</button>

            </div>

    </div>

</section>

@code {
    private Order _currentOrder;
    private Customer _currentUser;
    private decimal _totalPriceReadyToPayWorkTemplates;
    private DateTime _orderDate = DateTime.Now.AddDays(1);
    private List<WorkTemplate> _waitInBasketWorkTemplates = [];
    private List<WorkTemplate> _readyToPayWorkTemplates = [];

    [SupplyParameterFromQuery(Name = "customer_id")]
    public string ProtectedCustomerId { get; set; }

    public Guid CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CustomerId = GetUnprotectedCustomerId();
        _currentUser = await Mediator.Send(
            new GetCustomerQuery(
                new EntityFindOptions<Customer>(CustomerId)
            .ForceDatabaseSearch()));

        _currentOrder = await Mediator.Send(
            new GetOrderQuery(
                new EntityFindOptions<Order>(predicate: x => x.CustomerId == _currentUser.Id
                                        && x.Status == OrderStatus.Delayed)
            .ForceDatabaseSearch()));

        RefreshWorkTemplates(_currentOrder);

        _totalPriceReadyToPayWorkTemplates = CalculateTotalPriceReadyToPayWorkTemplates(_currentOrder);
    }

    private Guid GetUnprotectedCustomerId()
    {
        if (ProtectedCustomerId is null)
            return Guid.Empty;
        var protector = DataProtectionProvider.CreateProtector("customer_id");
        return Guid.Parse(protector.Unprotect(ProtectedCustomerId));
    }

    private async Task PayAsync()
    {
        try
        {
            await Mediator.Send(new PayOrderCommand(_currentUser, _currentOrder, _orderDate));
        }
        catch (Exception ex)
        {
            Logger.Error(ex, ex.Message);
            return;
        }

        _currentUser = await Mediator.Send(new GetCustomerByIdQuery(_currentUser.Id));

        RefreshWorkTemplates(_currentOrder);
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/account");
    }

    private async Task AddWorkTemplateToListAsync(WorkTemplate workTemplate,
        OrderWorkTemplateStatus workTemplateState,
        EntityState entityState)
    {
        var orderWorkTemplate = _currentOrder.WorkTemplatesLink.FirstOrDefault(x => x.WorkTemplateId == workTemplate.Id);
        if (orderWorkTemplate is null)
        {
            Logger.Error(
                $"OrderWorkTemplate with Id {{{orderWorkTemplate.WorkTemplateId}}} wasn't found");
            return;
        }
        orderWorkTemplate.Status = workTemplateState;
        orderWorkTemplate.EntityState = entityState;

        var changes = await Mediator.Send(new UpdateOrderCommand(_currentOrder));
        _totalPriceReadyToPayWorkTemplates = CalculateTotalPriceReadyToPayWorkTemplates(_currentOrder);
        if (changes < 1)
            Logger.Debug("While changing state of {1} has occurred some errors and nothing was saved to db", orderWorkTemplate);

        RefreshWorkTemplates(_currentOrder);
    }

    private decimal CalculateTotalPriceReadyToPayWorkTemplates(Order order)
    {
        return order.WorkTemplatesLink
            .Where(x => x.Status == OrderWorkTemplateStatus.ReadyToPay)
            .Select(x => x.WorkTemplate.Price)
            .Sum();
    }

    private void RefreshWorkTemplates(Order order)
    {
        _waitInBasketWorkTemplates = GetWorkTemplatesWithState(_currentOrder, OrderWorkTemplateStatus.WaitInBasket);
        _readyToPayWorkTemplates = GetWorkTemplatesWithState(_currentOrder, OrderWorkTemplateStatus.ReadyToPay);
    }

    private List<WorkTemplate> GetWorkTemplatesWithState(Order order, OrderWorkTemplateStatus workTemplateState)
    {
        return order.WorkTemplatesLink
            .Where(x => x.Status == workTemplateState)
            .Select(x => x.WorkTemplate)
            .ToList();
    }
}
